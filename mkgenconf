#!/bin/sh
mkgenconf_ident="@(#) LiS mkgenconf 1.8 10/11/04"

. ${CONFIG:=config.in}

#
# Make genconf.h
#
# This is a generated header file that captures information
# gleaned from the kernel.  linux-mdep.h uses it to get this
# info without having to clutter the command line with lots
# of "-D" options.
#
mk_genconf_h()
{
    f=${GENCONF:-${SRCDIR}/include/sys/LiS/genconf.h}

    [ -d $(dirname $f) ] || mkdir -p $(dirname $f)
    : > $f

    echo '/* FILE GENERATED by mkgenconf -- DO NOT MODIFY */' >> $f
    echo "#define GET_EMPTY_INODE(LIS_SB) ${GET_EMPTY_INODE}" | \
	sed "s/LIS_SB/sb/g" >>$f
    if [ "$INT_PSW..." = "y..." ]; then
	echo "#define INT_PSW	1" >>$f
    fi
    if [ "$SET_CPUS_ALLOWED" = "y" ]; then
	echo "#define SET_CPUS_ALLOWED	1" >>$f
    else
	echo "#undef SET_CPUS_ALLOWED" >>$f
    fi
    echo "#define STREAMS_REGPARM	$STREAMS_REGPARM" >>$f
    CCREGPARM=`echo $CCREGPARM | sed -e's/.*=//'`
    echo "#define CCREGPARM	$CCREGPARM" >>$f
    if [ "$TARGET" = "l" ]; then
	if [ "$CCREGPARM" = "0" -a "$STREAMS_REGPARM" = "0" ]; then
	    echo "#define _RP     " >>$f
	else
	    echo "#define _RP  __attribute__ ((regparm($STREAMS_REGPARM)))" >>$f
	fi
    else
	echo "#define _RP     " >>$f
    fi
    # MarkS@Adax - 21 Dec 2004 - for MontaVista CGE 3.1 kernels (and 
    # possibly others, including those covered by define of KERNEL_2_5) 
    # the definition of the structure nameidata is moved to linux/namei.h.
    # Added the following so that the compile of head/linux-mdep.c uses 
    # linux/namei.h if present in the kernel source.
    if [ -e $KSRC/include/linux/namei.h ]; then
	echo "#define USE_NAMEI_H 1" >>$f
    fi

	# MarkS@Adax - 31 Jan 2005 - Debian 2.6.8 kernel unfortunately did not
	# implement use of the kref structure element as a replacement for
	# refcount within the kobject structure defined in kobject.h in the
	# kernel source.
	# We now have to determine if the kobject structure uses kref 
	# and if so, define KOBJ_USES_KREF for use in head/linux-mdep.c.
	# This should only apply to situations where KERNEL_2_5 is defined.
	# See head/linux-mdep.c for more details.
	hfile=$KSRC/include/linux/kobject.h
	structuses="none"
	if [ -e $hfile ]
	then
		# determine line number that begins the kobject structure definition
		line=`grep -n "struct.*kobject.*{" $hfile | head -n 1 |awk -F: '{ print $1 }'`
		if [ $? -eq 0 ]
		then
			# calculate total lines in hfile for use in preventing infinite loop
			maxlines=`cat $hfile | wc -l`

			# how many open curly braces do we encounter (including above)
			opencnt=1

			while :
			do
				line=`expr $line \+ 1`

				# read next line in file
				nextline=`sed -n -e"$line p" $hfile`
				#echo "$nextline"

				# check nextline for open curly brace and 
				# increment counter if found
				echo "$nextline" | grep '{' > /dev/null 2>&1
				if [ $? -eq 0 ]
				then
					opencnt=`expr $opencnt \+ 1`	
				fi

				# check nextline for close curly brace and
				# if found, and only 1 open curly found so far, break
				# otherwise decrement counter
				echo "$nextline" | grep '}' > /dev/null 2>&1
				if [ $? -eq 0 ]
				then
					if [ $opencnt -eq 1 ]
					then
						break
					else
						opencnt=`expr $opencnt \- 1`
					fi
				fi

				# check nextline for kref structure member and
				# if found set flag and break
				echo "$nextline" | grep 'kref' > /dev/null 2>&1
				if [ $? -eq 0 ]
				then
					# if the kobject structure uses kref as an
					# element define flag for use in head/linux-mdep.c
					echo "#define KOBJ_USES_KREF 1" >>$f
					structuses="kref"
					break
				fi

				# prevent infinite loop and don't go beyond last 
				# line in file
				if [ $line -gt $maxlines ]
				then
					break
				fi
			done
		fi
	fi
}

mk_genconf_h
